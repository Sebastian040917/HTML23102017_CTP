function getParameterByName(e) { e = e.replace(/[\[]/, "[").replace(/[\]]/, "]"); var t = new RegExp("[?&]" + e + "=([^&#]*)"), a = t.exec(location.search); return null == a ? "" : decodeURIComponent(a[1].replace(/\+/g, " ")) } function numberWithCommas(e, t, a) { a || (a = 1); var r = e.toFixed(a).split("."); return r[0] = r[0].replace(/\B(?=(\d{3})+(?!\d))/g, t), r.join(".") } function getFormatedDateTime(e, t) { var a, r, s; if (r = trimStart(t.replace("PT", "").split("H")[0], "0"), s = trimStart(t.replace("PT", "").split("H")[1].split("M")[0], "0"), e) { var i = new Date(parseInt(e.split("(")[1].split(")")[0])); a = new Date(i.getUTCFullYear(), i.getUTCMonth(), i.getUTCDate(), parseInt(r), parseInt(s)) } return a } function addMinutes(e, t) { return new Date(e.getTime() + 6e4 * t) } function trimStart(e, t) { var a; for (a = e; a.substring(0, 1) == t && a.length > 1;) a = a.substring(1, a.length); return a } function getFormatedDate(e) { var t; return t = e.getFullYear() + "-" + (e.getMonth() + 1 < 10 ? "0" + (e.getMonth() + 1) : (e.getMonth() + 1).toString()) + "-" + (e.getDate() < 10 ? "0" + e.getDate() : e.getDate().toString()) + "T00:00:00" } function getFormatedTime(e) { var t; return t = "PT" + e.getHours() + "H" + e.getMinutes() + "M00S" } function onDropConfirm(e) { me.__ddContext.finalize("yes" === e) } function generateMepXML(e) { var t; return t = '<?xml version="1.0" encoding="utf-8"?>', t += '<entry xml:base="' + params.baseUrl + 'sap/opu/odata/sap/ZCXGS_CSDSLSBM_LS_ORDER_PLAN/" xmlns="http://www.w3.org/2005/Atom" xmlns:m="http://schemas.microsoft.com/ado/2007/08/dataservices/metadata" xmlns:d="http://schemas.microsoft.com/ado/2007/08/dataservices">', t += "<id>" + params.baseUrl + "sap/opu/odata/sap/ZCXGS_CSDSLSBM_LS_ORDER_PLAN/ServerSideObjects('" + e.sessionId + "')</id>", t += '<title type="text">ServerSideObjects(\'' + e.sessionId + "')</title>", t += "<updated>2015-05-26T00:03:41Z</updated>", t += '<category term="ZCXGS_CSDSLSBM_LS_ORDER_PLAN.ServerSideObject" scheme="http://schemas.microsoft.com/ado/2007/08/dataservices/scheme"/>', t += "<link href=\"ServerSideObjects('" + e.sessionId + '\')" rel="edit" title="ServerSideObject"/>', t += "<link href=\"ServerSideObjects('" + e.sessionId + '\')/MEP_List" rel="http://schemas.microsoft.com/ado/2007/08/dataservices/related/MEP_List" type="application/atom+xml;type=feed" title="MEP_List"/>', t += "<link href=\"ServerSideObjects('" + e.sessionId + '\')/Chart_Elements" rel="http://schemas.microsoft.com/ado/2007/08/dataservices/related/Chart_Elements" type="application/atom+xml;type=feed" title="Chart_Elements"/>', t += '<content type="application/xml">', t += "<m:properties>", t += "<d:SessionId>" + e.sessionId + "</d:SessionId>", t += e.date ? "<d:Date>" + e.date + "T00:00:00</d:Date>" : "<d:Date>0000-00-00T00:00:00</d:Date>", t += e.time ? "<d:Time>" + e.time + "</d:Time>" : "<d:Time>PT00H00M00S</d:Time>", t += e.plantAdded ? "<d:AddPlant>" + e.plantAdded + "</d:AddPlant>" : "<d:AddPlant/>", t += e.plantSelected ? "<d:SelPlant>" + e.plantSelected + "</d:SelPlant>" : "<d:SelPlant/>", t += e.morePlants ? "<d:MorePlants>X</d:MorePlants>" : "<d:MorePlants/>", t += e.refresh ? "<d:Refresh>X</d:Refresh>" : "<d:Refresh/>", t += e.newDateTime ? "<d:ChangeDateTime>X</d:ChangeDateTime>" : "<d:ChangeDateTime/>", t += e.IsInit ? "<d:Initialize>X</d:Initialize>" : "<d:Initialize/>", e.setPump && (t += "<d:SetPump>X</d:SetPump>", t += "<d:PumpId>" + e.setPump + "</d:PumpId>", t += "<d:PumpEndDate>" + e.pumpEndDate + "</d:PumpEndDate>", t += "<d:PumpEndTime>" + e.pumpEndTime + "</d:PumpEndTime>", t += "<d:PumpStartDate>" + e.pumpStartDate + "</d:PumpStartDate>", t += "<d:PumpStartTime>" + e.pumpStartTime + "</d:PumpStartTime>"), t += "</m:properties>", t += "</content>", t += "</entry>" } Ext.define("params", { urlPrefix: "", userId: "", noPlants: 5, app: "", dateFormat: "d.m.Y", thousandSep: ",", userName: "", sessionId: "", baseUrl: "", schPath: "../../ZCXBS_1045_EXTJ", language: "es-MX", isBatcher: !1 }); var app = "", isGw = "X" == getParameterByName("gw") ? !0 : !1, schPath; isGw ? (params.urlPrefix = "../", params.schPath = "../../ZCXBS_1045_EXTJ", params.app = "../app", params.userId = "", params.sessionId = getParameterByName("session_id"), getParameterByName("language") && (params.language = getParameterByName("language")), params.baseUrl = "http://mxoccsapegd01.noam.cemexnet.com:8000/") : (params.urlPrefix = "http://localhost:9010/", params.schPath = "http://localhost:9010/", params.app = "app", params.userId = "jgarciag", params.sessionId = getParameterByName("session_id"), getParameterByName("language") && (params.language = getParameterByName("language")), params.baseUrl = "http://mxoccsapegd01.noam.cemexnet.com:8000/"), Ext.Loader.setConfig({ enabled: !0, disableCaching: !1 }), Ext.Loader.setPath("Sch", params.schPath + "/Sch"), Ext.require(["Sch.panel.SchedulerTree"]), Array.prototype.indexOf || (Array.prototype.indexOf = function (e, t) { for (var a = t || 0, r = this.length; r > a; a++) if (this[a] === e) return a; return -1 }), Ext.override(Ext.dom.Element, { setStyle: function (e, t) { var a = function (e) { var t = e, a = new RegExp(/NaNpx/gi); return e && e.search && e.search(a) > -1 && (t = "inherit"), t }, r = e, s = a(t); if (r) for (var i in r) r[i] = a(r[i]); return this.callSuper([r, s]) } }), Ext.define("Test43.controller.Main", { extend: "Ext.app.Controller", requires: ["Ext.util.Format", "Sch.panel.SchedulerGrid"], refs: [{ ref: "DispatchTree", selector: "dispatchTree" }, { ref: "GraphView", selector: "graphView" }, { ref: "MepView", selector: "mepView" }], date: "", time: "", dateTime: new Date, header: "", sessionId: "", pumpService: null, resourceName: "", hasPump: !0, hasConcrete: !0, init: function () { me = this, this.loadUserData(params.sessionId) }, putMEP: function (e, t, a, r, s, i, n, o) { var d, l; e && t && (Ext.getCmp("pnlGrafica") && Ext.getCmp("pnlGrafica").setLoading(), Ext.getCmp("mepView") && Ext.getCmp("mepView").setLoading(), me.hasPump && !Ext.getCmp("schMain").hidden && Ext.getCmp("schMain").setLoading(), d = { sessionId: e, IsInit: a, plantAdded: r, plantSelected: s, morePlants: i, newDateTime: n, date: me.date, time: me.time, setPump: o }, d.setPump && (d.pumpStartDate = getFormatedDate(me.pumpService.data.StartDate), d.pumpStartTime = getFormatedTime(me.pumpService.data.StartDate), d.pumpEndDate = getFormatedDate(me.pumpService.data.EndDate), d.pumpEndTime = getFormatedTime(me.pumpService.data.EndDate)), l = { "x-csrf-token": t, "Content-Type": "application/atom+xml", type: "entry" }, Ext.Ajax.request({ url: params.baseUrl + "sap/opu/odata/sap/ZCXGS_CSDSLSBM_LS_ORDER_PLAN/ServerSideObjects('" + e + "')", params: generateMepXML(d), method: "PUT", headers: l, callback: function (e, t) { t && !s ? me.getMEP(me.sessionId, me.header) : Ext.getCmp("mepView") && Ext.getCmp("mepView").setLoading(!1) } })) }, getMEP: function (e) { var t; t = Ext.getStore("SessionDataStore"), t.proxy.url = params.baseUrl + "sap/opu/odata/sap/ZCXGS_CSDSLSBM_LS_ORDER_PLAN/ServerSideObjects('" + e + "')?$expand=MEP_List,Chart_Elements,Pump_List,AssignPump_List&$format=json", t.load({ callback: function (e) { var t, a, r, s; if (t = Ext.getStore("UserPlantStore"), a = [], e && e.length > 0) { s = new Date(parseInt(e[0].data.Date.split("(")[1].split(")")[0])), me.dateTime = new Date(s.getUTCFullYear(), s.getUTCMonth(), s.getUTCDate(), parseInt(trimStart(e[0].data.Time.replace("PT", "").split("H")[0], "0")), parseInt(trimStart(e[0].data.Time.replace("PT", "").split("H")[1].split("M")[0]), "0")), me.date = s.getUTCFullYear() + "-" + (s.getUTCMonth() + 1 < 10 ? "0" + (s.getUTCMonth() + 1) : (s.getUTCMonth() + 1).toString()) + "-" + (s.getUTCDate() < 10 ? "0" + s.getUTCDate() : s.getUTCDate().toString()), me.time = e[0].data.Time; for (var i = 0; i < e[0].MepList().data.length; i++) r = e[0].MepList().data.items[i].data, a.push({ plant: r.Plant, plant_name: r.PlantName, travel_time: r.TravelTime.replace("PT", "").split("H")[0] + ":" + r.TravelTime.replace("PT", "").split("H")[1].split("M")[0], distance: numberWithCommas(parseFloat(r.Distance), ",") + " " + r.Unit, cost: numberWithCommas(parseFloat(r.Cost), ","), isselected: "X" == r.Mark || 1 == e[0].MepList().data.length, ctp_icon: r.CtpImage, Color: r.Color }), a[i].isselected && Test43.app.getController("Main").getGrafica(a[i]); me.pumpService = { ResourceId: e[0].data.PumpId ? e[0].data.PumpId : 1, Name: "", StartDate: getFormatedDateTime(e[0].data.PumpStartDate, e[0].data.PumpStartTime), EndDate: getFormatedDateTime(e[0].data.PumpEndDate, e[0].data.PumpEndTime), Color: "", Group: "Servicio" }, me.resourceName = e[0].data.PumpDescript, t.loadData(a), Ext.getCmp("txtHour").setValue(me.dateTime), Ext.getCmp("txtFrom").setMinValue(new Date(me.dateTime)), Ext.getCmp("txtFrom").setValue(new Date(me.dateTime)), me.hasConcrete = "X" == e[0].data.HasConcrete, me.hasPump = "X" == e[0].data.HasPumping, me.hasPump && (Ext.getCmp("schMain").setVisible(!0), me.loadSch()) } Ext.getCmp("mepView") && Ext.getCmp("mepView").setLoading(!1) } }) }, getGrafica: function (e) { var t, a, r, s, i; if (t = Ext.getStore("GraphStore"), a = Ext.getStore("SessionDataStore"), r = [], Ext.getStore("SessionDataStore").data.items.length) { s = Ext.getStore("SessionDataStore").data.items[0].ChartList().data.items; for (var n = 0; n < s.length; n++) s[n].data.Plant == e.plant && (i = parseFloat(s[n].data.Time.replace("PT", "").split("H")[0]) + .01666 * s[n].data.Time.replace("PT", "").split("H")[1].split("M")[0], r.push({ time: i, loads_per_hour_avail: s[n].data.LoadsPerHourAvail, available_vehicles: s[n].data.VehicleAvail, simulated_loads: s[n].data.SimulatedLoads, existing_loads: s[n].data.ExistingLoads, vehicle_count: s[n].data.VehicleCount, plant: s[n].data.Plant, loadAdded: s[n].data.SimultaneousLoads })); t.loadData(r), Ext.getCmp("pnlGrafica").setLoading(!1), Test43.app.getController("Main").setGraphTitle(e.plant + " - " + e.plant_name) } }, addPlant: function (e) { this.putMEP(this.sessionId, this.header, !1, e.split("-")[0].substring(0, 4)) }, masPlantas: function () { this.putMEP(this.sessionId, this.header, !1, "", "", !0) }, setPump: function (e) { this.putMEP(this.sessionId, this.header, !1, "", "", !1, !1, e) }, changeDateTime: function (e, t) { me.date = e.getFullYear() + "-" + (e.getMonth() + 1 < 10 ? "0" + (e.getMonth() + 1) : (e.getMonth() + 1).toString()) + "-" + (e.getDate() < 10 ? "0" + e.getDate() : e.getDate().toString()), me.time = "PT" + t.getHours() + "H" + t.getMinutes() + "M00S", this.putMEP(this.sessionId, this.header, !1, "", "", !1, !0) }, selectPlant: function (e) { this.putMEP(this.sessionId, this.header, !1, "", e, !1) }, loadUserData: function (e) { var t; t = Ext.getStore("UserDataStore"), t.proxy.url = params.baseUrl + "sap/opu/odata/sap/ZCXGS_CSDSLSBM_LS_INITLOAD/Settings('" + e + "')?$expand=Plant_List&$format=json", Ext.Ajax.request({ url: params.baseUrl + "sap/opu/odata/sap/ZCXGS_CSDSLSBM_LS_INITLOAD/Settings('" + e + "')?$expand=Plant_List&$format=json", method: "GET", headers: { "X-CSRF-Token": "Fetch" }, withCredentials: !0, callback: function (t, a, r) { var s, i, n, o; if (a) { s = r.getResponseHeader("x-csrf-token"), i = Ext.JSON.decode(r.responseText).d, n = Ext.getStore("PlantStore"), o = []; for (var d = 0; d < i.Plant_List.results.length; d++) o.push("" == i.Plant_List.results[d].Descr ? { Id: i.Plant_List.results[d].PlantCode, Name: i.raw.Plant_List.results[d].PlantCode } : i.Plant_List.results[d].Descr.length > 13 ? { Id: i.Plant_List.results[d].PlantCode, Name: i.Plant_List.results[d].PlantCode + " - " + i.Plant_List.results[d].Descr.substring(0, 13) + "..." } : { Id: i.Plant_List.results[d].PlantCode, Name: i.Plant_List.results[d].PlantCode + " - " + i.Plant_List.results[d].Descr }); n.loadData(o), me.sessionId = e, me.header = s, params.dateFormat = i.DateFormat, params.isBatcher = i.IsBatcher, i.ShowCost && me.showCostColumn(i.ShowCost), me.setBatcherMode(params.isBatcher), me.putMEP(e, s, !0) } } }) }, showCostColumn: function (e) { e && (Ext.getCmp("grdUserPlants").columns[5].setVisible(!0), Ext.getCmp("grdUserPlants").columns[1].width = "11%", Ext.getCmp("grdUserPlants").columns[2].width = "25%", Ext.getCmp("grdUserPlants").columns[3].width = "15%", Ext.getCmp("grdUserPlants").columns[4].width = "15%", Ext.getCmp("grdUserPlants").columns[5].width = "17%", Ext.getCmp("grdUserPlants").columns[6].width = "10%") }, setBatcherMode: function (e) { e ? (Ext.getCmp("cmbPlants").setDisabled(!0), Ext.getCmp("btnAddPlant").setDisabled(!0), Ext.getCmp("btnMorePlants").setDisabled(!0)) : (Ext.getCmp("cmbPlants").setDisabled(!1), Ext.getCmp("btnAddPlant").setDisabled(!1), Ext.getCmp("btnMorePlants").setDisabled(!1)) }, setGraphTitle: function (e) { var t; t = "Programa de Cargas: " + e, Ext.getCmp("pnlGrafica").setTitle(t) }, loadSch: function () { var e, t, a, r, s, i, n = Ext.StoreManager.items[2]; if (e = Ext.getStore("SessionDataStore"), r = Ext.getStore("ItemsStore"), i = Ext.getCmp("schPumpService"), a = [], s = [], i.switchViewPreset("hourAndDay", new Date(me.dateTime.getFullYear(), me.dateTime.getMonth(), me.dateTime.getDate(), 0), new Date(me.dateTime.getFullYear(), me.dateTime.getMonth(), me.dateTime.getDate() + 1, 0)), e.data.items[0].PumpListStore.data.items.length) { t = e.data.items[0].PumpListStore.data.items, a.push({ Id: 1, Name: me.resourceName, Status: "" }); for (var o = 0; o < t.length; o++) a.push({ Id: t[o].data.EquipId, Name: t[o].data.EquipName, Status: t[o].data.Status }) } if (n.loadData(a), t = e.data.items[0].AssignPumpStore.data.items, s.push(me.pumpService ? me.pumpService : { ResourceId: 1, Name: "", StartDate: me.dateTime, EndDate: addMinutes(me.dateTime, 30), Color: "", Group: "Servicio" }), t.length) for (var o = 0; o < t.length; o++) s.push({ ResourceId: t[o].data.EquipId, Name: "", StartDate: getFormatedDateTime(t[o].data.FromDate, t[o].data.FromTime), EndDate: getFormatedDateTime(t[o].data.ToDate, t[o].data.ToTime), Color: t[o].data.Color }); r.loadData(s), i.getSchedulingView().scrollEventIntoView(r.data.items[0], !0), i && (i = i.getSchedulingView(), i.setTimeResolution(Sch.util.Date.MINUTE, 5)), me.pumpService = r.data.items[0], Ext.getCmp("schMain").setLoading(!1) } }), Ext.define("Test43.controller.Mep", { extend: "Ext.app.Controller", refs: [{ ref: "grid", selector: "gridpanel" }], init: function () { this.getGrid() } }), Ext.define("Test43.model.AssignPumpModel", { extend: "Ext.data.Model", fields: [{ name: "EquipId", type: "int" }, { name: "FromDate", type: "string" }, { name: "FromTime", type: "string" }, { name: "ToDate", type: "string" }, { name: "ToTime", type: "string" }, { name: "Color", type: "string" }] }), Ext.define("Test43.model.ChartModel", { extend: "Ext.data.Model", fields: [{ name: "LoadsPerHourAvail", type: "int" }, { name: "VehicleAvail", type: "int" }, { name: "SimulatedLoads", type: "int" }, { name: "ExistingLoads", type: "int" }, { name: "VehicleCount", type: "int" }, { name: "Time", type: "string" }, { name: "Date", type: "string" }, { name: "Plant", type: "string" }, { name: "SimultaneousLoads", type: "int" }] }), Ext.define("Test43.model.GenericComboModel", { extend: "Ext.data.Model", fields: [{ name: "id", type: "string" }, { name: "value", type: "string" }] }), Ext.define("Test43.model.GraphDataModel", { extend: "Ext.data.Model", fields: [{ name: "time", type: "decimal" }, { name: "loads_per_hour_avail", type: "int" }, { name: "available_vehicles", type: "int" }, { name: "simulated_loads", type: "int" }, { name: "existing_loads", type: "int" }, { name: "vehicle_count", type: "int" }, { name: "plant", type: "string" }, { name: "loadAdded", type: "int" }] }), Ext.define("Test43.model.ItemsModel", { extend: "Sch.model.Event", fields: [{ name: "Group", type: "string" }, { name: "Color", type: "string" }] }), Ext.define("Test43.model.MepListModel", { extend: "Ext.data.Model", fields: [{ name: "SessionId", type: "string" }, { name: "Mark", type: "string" }, { name: "Plant", type: "string" }, { name: "PlantName", type: "string" }, { name: "TravelTime", type: "string" }, { name: "Distance", type: "string" }, { name: "Unit", type: "string" }, { name: "Cost", type: "string" }, { name: "Color", type: "string" }, { name: "CtpImage", type: "string" }] }), Ext.define("Test43.model.OrderResource", { extend: "Sch.model.Resource", fields: ["Id", "Name"] }), Ext.define("Test43.model.PlantListModel", { extend: "Ext.data.Model", fields: [{ name: "Descr", type: "string" }, { name: "PlantCode", type: "string" }, { name: "DistChannel", type: "datetime" }, { name: "SalesOrg", type: "decimal" }, { name: "UserName", type: "decimal" }] }), Ext.define("Test43.model.PlantModel", { extend: "Ext.data.Model", fields: [{ name: "Id", type: "string" }, { name: "Name", type: "string" }] }), Ext.define("Test43.model.PumpListModel", { extend: "Ext.data.Model", fields: [{ name: "EquipId", type: "int" }, { name: "EquipName", type: "string" }, { name: "Status", type: "string" }] }), Ext.define("Test43.model.SessionDataModel", { extend: "Ext.data.Model", requires: ["Test43.model.MepListModel", "Test43.model.ChartModel", "Test43.model.PumpListModel", "Test43.model.AssignPumpModel"], fields: [{ name: "SessionId", type: "string" }, { name: "Date", type: "datetime" }, { name: "Time", type: "string" }, { name: "DateFormat", type: "string" }, { name: "DecimalSep", type: "string" }, { name: "IsBatcher", type: "string" }, { name: "ThousandSep", type: "string" }, { name: "UserName", type: "string" }, { name: "ShowCost", type: "string" }, { name: "PumpDescript", type: "string" }, { name: "PumpStartDate", type: "string" }, { name: "PumpStartTime", type: "string" }, { name: "PumpEndDate", type: "string" }, { name: "PumpEndTime", type: "string" }, { name: "HasPumping", type: "string" }, { name: "HasConcrete", type: "string" }, { name: "PumpId", type: "int" }], hasMany: [{ name: "MepList", model: "Test43.model.MepListModel", associationKey: "MEP_List.results" }, { name: "ChartList", model: "Test43.model.ChartModel", associationKey: "Chart_Elements.results" }, { name: "PumpList", model: "Test43.model.PumpListModel", associationKey: "Pump_List.results" }, { name: "AssignPump", model: "Test43.model.AssignPumpModel", associationKey: "AssignPump_List.results" }] }), Ext.define("Test43.model.UserDataModel", { extend: "Ext.data.Model", fields: [{ name: "PUname", type: "string" }, { name: "PSalesOrg", type: "string" }, { name: "PDistChannel", type: "string" }, { name: "DateFormat", type: "string" }, { name: "DecimalSep", type: "string" }, { name: "IsBatcher", type: "string" }, { name: "ThousandSep", type: "string" }, { name: "UserName", type: "string" }, { nmae: "ShowCost", type: "string" }], hasMany: [{ name: "Plant_List", model: "Test43.model.PlantListModel", associationKey: "Plant_List.results" }] }), Ext.define("Test43.model.UserPlantModel", { extend: "Ext.data.Model", fields: [{ name: "plant", type: "string" }, { name: "plant_name", type: "string" }, { name: "travel_time", type: "datetime" }, { name: "distance", type: "decimal" }, { name: "cost", type: "decimal" }, { name: "ctp_icon", type: "string" }, { name: "isselected", type: "bool" }, { name: "Date", type: "datetime" }, { name: "Time", type: "string" }, { name: "Color", type: "string" }] }), Ext.define("Test43.store.GenericComboStore", { requires: ["Test43.model.GenericComboModel"], extend: "Ext.data.Store", model: "Test43.model.GenericComboModel", storeId: "GenericcomboStore", proxy: { type: "memory" } }), Ext.define("Test43.store.GraphStore", { requires: ["Test43.model.GraphDataModel"], extend: "Ext.data.Store", model: "Test43.model.GraphDataModel", storeId: "GraphStore", autoLoad: !1, proxy: { type: "ajax", reader: { type: "json", root: "d.results" } } }), Ext.define("Test43.store.ItemsStore", { extend: "Sch.data.EventStore", requires: ["Test43.model.ItemsModel"], model: "Test43.model.ItemsModel", storeId: "ItemsStore", autoLoad: !1, proxy: { type: "memory" } }), Ext.define("Test43.store.PlantStore", { requires: ["Test43.model.PlantModel"], extend: "Ext.data.Store", model: "Test43.model.PlantModel", storeId: "PlantStore", autoLoad: !1, proxy: { type: "memory" } }), Ext.define("Test43.store.ResourceStore", { extend: "Sch.data.ResourceStore", requires: ["Test43.model.OrderResource"], model: "Test43.model.OrderResource", storeId: "ResourceStore", proxy: { type: "memory" }, folderSort: !1 }), Ext.define("Test43.store.SessionDataStore", { requires: ["Test43.model.SessionDataModel", "Test43.model.MepListModel"], extend: "Ext.data.Store", model: "Test43.model.SessionDataModel", storeId: "SessionDataStore", autoLoad: !1, proxy: { type: "ajax", url: params.baseUrl + "/sap/opu/odata/sap/ZCXGS_CSDSLSBM_LS_ORDER_PLAN/ServerSideObjects('" + params.sessionId + "')?$expand=MEP_List,Chart_Elements&$format=json", reader: { type: "json", root: "d" } } }), Ext.define("Test43.store.UserDataStore", { requires: ["Test43.model.UserDataModel"], extend: "Ext.data.Store", model: "Test43.model.UserDataModel", storeId: "UserDataStore", autoLoad: !1, proxy: { type: "ajax", reader: { type: "json", root: "d" } } }), Ext.define("Test43.store.UserPlantStore", { requires: ["Test43.model.UserPlantModel"], extend: "Ext.data.Store", model: "Test43.model.UserPlantModel", storeId: "UserPlantStore", autoLoad: !1, proxy: { type: "ajax", url: params.urlPrefix + "data/UserPlants.json", reader: { type: "json", root: "d.results" } } }), Ext.define("Test43.view.DispatchTree", { requires: ["Sch.panel.SchedulerGrid"], extend: "Ext.container.Container", alias: "widget.dispatchtree", border: !1, items: [{ xtype: "schedulergrid", id: "schPumpService", flex: 1, startDate: new Date, endDate: new Date, resourceStore: "ResourceStore", eventStore: "ItemsStore", useArrows: !0, rootVisible: !0, viewPreset: "hourAndDay", multiSelect: !1, minZoomLevel: 17, maxZoomLevel: 23, constrainDragToResource: !1, enableDragCreation: !1, readOnly: !1, eventResizeHandles: "none", eventBorderWidth: 4, maxHeight: 200, autoScroll: !0, dragging: !0, headerConfig: { middle: { unit: "HOUR", align: "left", renderer: function (e, t, a, r) { return 0 === r ? '<b style="position: absolute;top:8px">Timeline</b>' : (a.headerCls += "ticks-header", Ext.String.format('<div class="ticks-outer">&nbsp;<div class="ticks-inner">&nbsp;</div></div>{0} s', r)) } }, top: { unit: "DAY", increment: 1, dateFormat: "d M Y", renderer: function (e, t, a, r) { return 0 === r ? '<b style="position: absolute;top:8px">Timeline</b>' : (a.headerCls += "ticks-header", Ext.String.format('<div class="ticks-outer">&nbsp;<div class="ticks-inner">&nbsp;</div></div>{0} s', r)) } } }, snapToIncrement: !0, allowOverlap: !1, viewConfig: { loadMask: !0, stripeRows: !0, forceFit: !0 }, columns: [{ header: "Camiones", width: 130, dataIndex: "Name" }], eventRenderer: function (e, t, a) { 1 == e.data.ResourceId ? (a.style = "background-color: #CCCCCC;", a.cls = "evt-Asignable") : "Servicio" == e.data.Group ? (a.style = "background-color: #FFCC44;", a.cls = "evt-Asignable") : a.style = "background-color: " + e.data.Color + ";" }, dndValidatorFn: function (e, t) { return t.get("Available") ? void 0 : { valid: !1, message: t.getName() + " is not available." } }, schedulerConfig: { scroll: !0, columnLines: !1, flex: 1 }, listeners: { beforedragcreate: function (e, t) { return t.get("Available") ? void 0 : (Ext.Msg.alert("Oops", "This machine is not available"), !1) }, beforeeventdrag: function (e, t) { return "Servicio" === t.get("Group") }, beforeeventdropfinalize: function (e, t) { if (t.resourceRecord !== t.newResource) { var a = Test43.app.getController("Main").pumpService, r = Test43.app.getController("Main"); return a.data.StartDate = t.startDate, a.data.EndDate = t.endDate, a.setResourceId(t.newResource.data.Id), r.setPump(t.newResource.data.Id), t.finalize(!0), !1 } var a = Test43.app.getController("Main").pumpService, r = Test43.app.getController("Main"); return a.data.StartDate == t.startDate ? !1 : (a.data.StartDate = t.startDate, a.data.EndDate = t.endDate, r.setPump(t.newResource.data.Id), t.finalize(!0), !1) }, itemdblClick: function (e, t) { var a = Test43.app.getController("Main").pumpService, r = Test43.app.getController("Main"); a.setResourceId(t.data.Id), r.setPump(t.data.Id), Ext.getCmp("schPumpService").getSchedulingView().scrollEventIntoView(a, !0) } } }] }), Ext.define("Test43.view.GraphView", { extend: "Ext.panel.Panel", alias: "widget.graphview", layout: { type: "vbox", align: "center" }, border: !1, height: 355, margins: { top: 5, left: 5, right: 5, bottom: 5 }, items: [{ xtype: "chart", store: "GraphStore", width: "100%", minHeight: 150, flex: 5, id: "chtMain", animate: !1, shadow: !1, axes: [{ title: "", type: "Numeric", grid: !0, position: "left", fields: ["existing_loads", "simulated_loads", "loads_per_hour_avail", "available_vehicles", "vehicle_count", "loadAdded"], minorTickSteps: 2 }, { title: "", type: "Numeric", position: "bottom", fields: ["time"], steps: 24 }], series: [{ type: "line", xField: "time", yField: "loadAdded", showMarkers: !1, style: { stroke: "#FF0000", "stroke-width": 2 }, listeners: { afterrender: function () { Ext.getCmp("pnlGrafica").setLoading(!1) } } }, { type: "line", xField: "time", yField: "vehicle_count", style: { stroke: "#FF0000", "stroke-width": 2, "stroke-dasharray": 3 }, showMarkers: !1 }, { type: "line", xField: "time", yField: "loads_per_hour_avail", showMarkers: !1, style: { "stroke-width": 2, stroke: "rgb(148, 54, 52)" } }, { type: "column", xField: "time", yField: ["existing_loads", "simulated_loads"], showMarkers: !1, style: { "stroke-width": 0 }, stacked: !0, renderer: function (e, t, a, r) { return r % 2 ? Ext.apply(a, { fill: "#FF9900" }) : Ext.apply(a, { fill: "#0000FF" }) } }] }, { xtype: "chart", store: "GraphStore", id: "grpBottom", width: "100%", flex: 2, minHeight: 125, margin: { top: -45, left: 0, bottom: 0, right: 0 }, animate: !0, shadow: !1, axes: [{ title: "", type: "Numeric", position: "left", fields: ["available_vehicles"], steps: 3 }, { title: "", type: "Numeric", position: "bottom", fields: ["time"], steps: 24 }], series: [{ type: "column", xField: "time", yField: "available_vehicles", showMarkers: !1, style: { "stroke-width": 0, stroke: "#9900FF" }, renderer: function (e, t, a) { return Ext.apply(a, { fill: "rgba(153, 0, 255, 0.9)" }) } }] }] }), Ext.define("Test43.view.Main", { extend: "Ext.container.Container", xtype: "app-main", items: [{ xtype: "container", height: "100%", items: [{ layout: "hbox", border: !1, height: "40%", minHeight: 350, items: [{ xtype: "mep", id: "mepView", flex: 3 }, { xtype: "panel", title: "Programa de Cargas", flex: 6, id: "pnlGrafica", height: "100%", margins: { top: 5, left: 5, right: 5, bottom: 5 }, items: [{ xtype: "graphview", id: "graphView" }] }] }, { xtype: "panel", title: "Asignacion de bombas", flex: 4, width: "100%", margins: { top: 0, left: 10, right: 10, bottom: 10 }, padding: { top: 5, left: 5, right: 5, bottom: 5 }, items: [{ xtype: "dispatchtree", padding: { top: 5, left: 5, right: 5, bottom: 5 }, flex: 1, id: "schMain", hidden: !0 }] }] }] }), Ext.define("Test43.view.Mep", { requires: ["Ext.form.field.ComboBox"], extend: "Ext.panel.Panel", alias: "widget.mep", defaultType: "textfield", title: "MEP y CTP", width: "35%", height: "100%", align: "center", margins: { top: 5, left: 5, right: 5, bottom: 5 }, items: [{ xtype: "form", layout: { type: "fit", align: "center", pack: "center" }, height: "100%", minHeight: 355, border: !1, padding: { top: 20, left: 5, right: 5, bottom: 5 }, items: [{ layout: "anchor", border: !1, items: [{ layout: "hbox", border: !1, flex: 2, items: [{ xtype: "label", text: "Planta", aling: "center", flex: 1, padding: { left: 5 } }, { xtype: "combobox", id: "cmbPlants", store: "PlantStore", displayField: "Name", valueField: "Id", aling: "middle", flex: 4, validateOnChange: !0, queryMode: "local", typeAhead: !0, minChars: 2, tabIndex: "1", disabled: !0, padding: { left: 5, right: 5 } }, { xtype: "button", text: "Agregar", tabIndex: "2", id: "btnAddPlant", disabled: !0, handler: function () { Ext.getCmp("cmbPlants").getValue() ? Test43.app.getController("Main").addPlant(Ext.getCmp("cmbPlants").getValue()) : Ext.MessageBox.alert("Error", "¡Debe seleccionar una planta!", "") }, scale: "small", align: "center", flex: 2, margin: { left: 5, right: 5, top: 0, bottom: 0 } }, { xtype: "button", text: "Mas Plantas", id: "btnMorePlants", disabled: !0, tabIndex: "3", handler: function () { Test43.app.getController("Main").masPlantas() }, scale: "small", aling: "center", flex: 2, margin: { left: 5, right: 5, top: 0, bottom: 0 } }] }, { xtype: "label", html: "&nbsp;", flex: 1 }, { xtype: "gridpanel", layout: { type: "fit" }, foreceFit: !0, id: "grdUserPlants", store: "UserPlantStore", padding: { left: 5, right: 5 }, autoScroll: !0, maxHeight: 180, tabIndex: "4", flex: 8, columns: [{ xtype: "checkcolumn", text: "", width: "6%", dataIndex: "isselected", sortable: !1, singleSelect: !0, listeners: { checkchange: function (e, t) { var a, r; a = [], r = Ext.getStore("UserPlantStore"); for (var s = 0; s < r.data.items.length; s++) a.push(r.data.items[s].data), a[s].isselected = s == t, s == t && (Test43.app.getController("Main").selectPlant(a[s].plant), Test43.app.getController("Main").getGrafica(a[s])); r.loadData(a) } } }, { text: "Centro", dataIndex: "plant", width: "11%", sortable: !1 }, { text: "Nombre", dataIndex: "plant_name", sortable: !1, width: "35%" }, { text: "Duracion", dataIndex: "travel_time", width: "19%", sortable: !1, align: "center" }, { text: "Distancia", dataIndex: "distance", width: "18%", sortable: !1, align: "center" }, { text: "Cost", dataIndex: "cost", width: "0%", sortable: !1, align: "center", hidden: !0 }, { text: "CTP", dataIndex: "ctp_icon", width: "10%", sortable: !1, align: "center", renderer: function (e) { return '<img src="' + params.schPath + "/icons/" + e + '" />' } }], viewConfig: { getRowClass: function (e) { return "#FFFFFF" == e.get("Color") ? "blanco" : "rojo" } } }, { xtype: "label", html: "&nbsp;", flex: 1 }, { layout: "hbox", flex: 2, border: !1, items: [{ xtype: "label", text: "Fecha de Entrega", layout: { type: "center" }, padding: { left: 35, right: 5 }, flex: 2, align: "center" }, { xtype: "label", text: "Hora", flex: 2, padding: { left: 10, right: 5 }, align: "center" }] }, { layout: "hbox", flex: 2, border: !1, items: [{ xtype: "button", text: "-", id: "btnMenosMes", width: 25, margin: { top: 0, right: 0, bottom: 0, left: 5 }, scale: "small", tabIndex: -1, handler: function () { Ext.getCmp("txtFrom").value > Ext.getCmp("txtFrom").minValue && (Ext.getCmp("txtFrom").setValue(Ext.Date.add(Ext.getCmp("txtFrom").value, Ext.Date.DAY, -1)), Ext.getCmp("btnCalcular").setDisabled(!1)) } }, { xtype: "datefield", id: "txtFrom", minValue: new Date, format: "d.m.Y", padding: { left: 5, right: 5 }, flex: 4 }, { xtype: "button", text: "+", id: "btnMasMes", width: 25, scale: "small", tabIndex: -1, handler: function () { Ext.getCmp("txtFrom").setValue(Ext.Date.add(Ext.getCmp("txtFrom").value, Ext.Date.DAY, 1)), Ext.getCmp("btnCalcular").setDisabled(!1) } }, { xtype: "button", text: "-", id: "btnMenosHora", width: 25, margin: { right: 5, left: 5, top: 0, bottom: 0 }, scale: "small", tabIndex: -1, handler: function () { var e; e = addMinutes(Ext.getCmp("txtHour").value, -5), Ext.getCmp("txtHour").setValue(e) } }, { xtype: "timefield", id: "txtHour", format: "H:i", increment: 5, flex: 4 }, { xtype: "button", text: "+", id: "btnMasHora", width: 25, margin: { left: 5, right: 5, top: 0, bottom: 0 }, scale: "small", tabIndex: -1, handler: function () { var e; e = addMinutes(Ext.getCmp("txtHour").value, 5), Ext.getCmp("txtHour").setValue(e) } }, { xtype: "button", text: "Ok", id: "btnCalcular", width: 40, scale: "small", margin: { left: 0, right: 5, top: 0, bottom: 0 }, handler: function () { Test43.app.getController("Main").changeDateTime(Ext.getCmp("txtFrom").value, Ext.getCmp("txtHour").value) } }] }] }] }] }), Ext.define("Test43.view.Viewport", { extend: "Ext.container.Viewport", requires: ["Test43.view.Main"], layout: { type: "fit", align: "stretch" }, items: [{ xtype: "app-main" }] }); var tree, resourceStore, eventStore; Ext.define("Test43.Application", { name: "Test43", extend: "Ext.app.Application", appFolder: params.app, views: ["DispatchTree", "Mep", "GraphView"], controllers: ["Main", "Mep"], models: ["ItemsModel", "OrderResource", "PlantModel", "UserPlantModel", "GraphDataModel", "GenericComboModel", "UserDataModel", "PlantListModel", "SessionDataModel", "MepListModel", "ChartModel", "PumpListModel", "AssignPumpModel"], stores: ["ItemsStore", "ResourceStore", "PlantStore", "UserPlantStore", "GraphStore", "GenericComboStore", "UserDataStore", "SessionDataStore"], launch: function () { delete Ext.tip.Tip.prototype.minWidth } }), Ext.application({ name: "Test43", extend: "Test43.Application", appFolder: params.app, autoCreateViewport: !0, init: function () { } }), Ext.setVersion("ext-theme-base", "4.2.3.1477"), Ext.setVersion("ext-theme-classic", "4.2.3.1477"), Ext.setVersion("ext-theme-neutral", "4.2.3.1477");